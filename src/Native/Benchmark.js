(function () {
    // CustomEvent polyfill for IE 9 and higher
    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent

    if ( typeof window.CustomEvent === "function" ) return false;

    function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent( 'CustomEvent' );
        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();


var _user$project$Native_Benchmark = (function () {

    // Create an opaque benchmark item (name and function)
    function bench(name, fn) {
	return {
	    name: name,
	    fn: fn
	}
    }

    function suite(options, name, benchmarkList) {
	var benchmarks = _elm_lang$core$Native_List.toArray(benchmarkList),
	    suite = new Benchmark.Suite(name),
	    i, curr;

	for (i = 0; i < benchmarks.length; i++) {
	    curr = benchmarks[i];
            suite = suite.add(curr.name, { fn: curr.fn, maxTime: options.maxTime });
	}

	return suite;
    }


    // The asyncronous benchmark.js suites started by `runTask` will report
    // results by generating an event via this function.
    function dispatchBenchmarkEvent(info) {
        var detail = { detail: info };
        var event = new CustomEvent('benchmarkEvent', detail);
        document.dispatchEvent(event);
    }

    // The Elm effect manager will call this function to monitor the results
    // generated by benchmark suites started by `runTask`.
    function watch(toTask) {
        function handleEvent(e) {
            var task = toTask(e.detail);
            _elm_lang$core$Native_Scheduler.rawSpawn(task);
        }

        return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
            document.addEventListener('benchmarkEvent', handleEvent);

            return function() {
                document.removeEventListener('benchmarkEvent', handleEvent);
            };
        });
    };


    // Execute the list of benchmark suites as an Elm task
    function runTask(suiteList) {
        return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
            var results = runTaskHelper(suiteList);
            return callback(_elm_lang$core$Native_Scheduler.succeed(
                _elm_lang$core$List$reverse( _elm_lang$core$Native_List.fromArray( results) )
            ));
        });
    }

    function runTaskHelper(suiteList) {
	var suites = _elm_lang$core$Native_List.toArray(suiteList),
	    i,
            completed = 0,
            results = [];       // TODO: no longer needed since running async?

        function recordEvent(event) {
            //console.log('event', event);
            dispatchBenchmarkEvent(event);
            results.push(event);
        }

	for (i = 0; i < suites.length; i++) {
	    suites[i]
		.on('start', function () {
                    console.log('platform', Benchmark.platform);
                    var event = {ctor: 'Start',
                                 _0: {
                                     suite: this.name,
                                     platform: Benchmark.platform.description
                                 }
                                };
                    recordEvent(event);
		})
		.on('cycle', function (event) {
                    var event = {
                        ctor: 'Cycle',
                        _0: {
                            suite: this.name,
                            benchmark: event.target.name,
                            //message: String(event.target),
                            freq: 1 / event.target.times.period, // mean ops/sec
                            rme: event.target.stats.rme,       // margin of error as % of mean
                            samples: event.target.stats.sample.length, // # of samples
                        }
                    };
                    recordEvent(event);
		})
		.on('complete', function () {
                    var event = {ctor: 'Complete', _0: this.name};
                    recordEvent(event);
                    completed++;
                    if (completed == suites.length) {
                        recordEvent({ctor: 'Finished'});
                    }
		})
		.on('error', function (event) {
		    var suite = this;
		    // copy suite into array of Benchmarks
		    var benchArray = Array.prototype.slice.call(suite);
		    // find the last benchmark with an 'error' field, presumed
		    // to be the most recent error
		    var errored = benchArray.reverse().find(function(e, i, a) {
                        return e.hasOwnProperty('error'); });

		    var erroredName = (typeof errored != 'undefined') ? errored.name : "<unknown>";
                    var error =
                        { ctor: 'BenchError',
                          _0: { 'suite': suite.name,
                                'benchmark': erroredName,
                                'message': event.target.error.message
                              }
                        };
                    recordEvent(error);
		})
		.run({'async': true});
	}
        return results;
    }

    return {
	bench: F2(bench),
	suite: F3(suite),
        runTask: runTask,
        watch: watch,
    };
})()
