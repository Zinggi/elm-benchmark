var _user$project$Main$testdata = _elm_lang$core$Native_List.range(1, 10000);
var _user$project$Main$testfn1 = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$List$map,
		F2(
			function (x, y) {
				return x + y;
			})(1),
		_user$project$Main$testdata);
};
var _user$project$Main$testfn2 = function (_p2) {
	var _p3 = _p2;
	return A2(
		_elm_lang$core$List$map,
		F2(
			function (x, y) {
				return x * y;
			})(7),
		_user$project$Main$testdata);
};
var _user$project$Main$testfn2$ = function () {
	var fn = function (i) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], i, 10000),
			0) ? A2(_elm_lang$core$Debug$log, 'testfn2\'', i) : (i * 7);
	};
	return function (_p4) {
		var _p5 = _p4;
		return A2(_elm_lang$core$List$map, fn, _user$project$Main$testdata);
	};
}();
var _user$project$Main$testfn3 = function (_p6) {
	var _p7 = _p6;
	return A2(
		_elm_lang$core$List$map,
		function (i) {
			return (i / 42) | 0;
		},
		_user$project$Main$testdata);
};
var _user$project$Main$testfn3$ = function () {
	var fn = function (i) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], i, 10000),
			0) ? A2(_elm_lang$core$Debug$log, 'testfn3', i) : ((i / 42) | 0);
	};
	return function (_p8) {
		var _p9 = _p8;
		return A2(_elm_lang$core$List$map, fn, _user$project$Main$testdata);
	};
}();
var _user$project$Main$options = {maxTime: 2};
var _user$project$Main$suite1 = A3(
	_user$project$Benchmark$suiteWithOptions,
	_user$project$Main$options,
	'suite1',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Benchmark$bench, 'fn1', _user$project$Main$testfn1),
			A2(_user$project$Benchmark$bench, 'fn2', _user$project$Main$testfn2),
			A2(_user$project$Benchmark$bench, 'fn1 again', _user$project$Main$testfn1)
		]));
var _user$project$Main$suite2 = A3(
	_user$project$Benchmark$suiteWithOptions,
	_user$project$Main$options,
	'suite2',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Benchmark$bench, 'fn3', _user$project$Main$testfn3),
			A2(_user$project$Benchmark$bench, 'fn3 again', _user$project$Main$testfn3),
			A2(_user$project$Benchmark$bench, 'fn3 another', _user$project$Main$testfn3)
		]));
var _user$project$Main$viewEvent = function (event) {
	var _p10 = event;
	return _elm_lang$html$Html$text(
		_elm_lang$core$Basics$toString(event));
};
var _user$project$Main$view = function (model) {
	var li = function (x) {
		return A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[x]));
	};
	return A2(
		_elm_lang$html$Html$ol,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$map,
			function (_p11) {
				return li(
					_user$project$Main$viewEvent(_p11));
			},
			model));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p12 = A2(_elm_lang$core$Debug$log, 'msg', msg);
		if (_p12.ctor === 'Event') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				A2(
					_elm_lang$core$Basics_ops['++'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[_p12._0])),
				_elm_lang$core$Native_List.fromArray(
					[]));
		} else {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				_elm_lang$core$Native_List.fromArray(
					[]));
		}
	});
var _user$project$Main$Event = function (a) {
	return {ctor: 'Event', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _user$project$Benchmark$events(_user$project$Main$Event);
};
var _user$project$Main$Error = function (a) {
	return {ctor: 'Error', _0: a};
};
var _user$project$Main$Started = function (a) {
	return {ctor: 'Started', _0: a};
};
var _user$project$Main$init = function () {
	var task = A2(
		_elm_lang$core$Task$andThen,
		_elm_lang$core$Process$sleep(0),
		function (_p13) {
			return _user$project$Benchmark$runTask(
				_elm_lang$core$Native_List.fromArray(
					[_user$project$Main$suite1, _user$project$Main$suite2]));
		});
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_List.fromArray(
			[]),
		_1: A3(_elm_lang$core$Task$perform, _user$project$Main$Error, _user$project$Main$Started, task)
	};
}();
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})
};
