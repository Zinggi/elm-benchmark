var _user$project$Benchmark$onSelfMsg = F3(
	function (router, event, state) {
		var _p0 = {ctor: '_Tuple3', _0: router, _1: event, _2: state};
		var _p1 = state;
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
		} else {
			var send = function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_lang$core$Platform$sendToApp,
					router,
					_p3._0(event));
			};
			return A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Task$sequence(
					A2(_elm_lang$core$List$map, send, _p1._0.subs)),
				function (_p4) {
					return _elm_lang$core$Task$succeed(state);
				});
		}
	});
var _user$project$Benchmark$init = _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
var _user$project$Benchmark$watch = _user$project$Native_Benchmark.watch;
var _user$project$Benchmark$onEffects = F3(
	function (router, subs, state) {
		var _p5 = {ctor: '_Tuple3', _0: router, _1: subs, _2: state};
		var _p6 = {ctor: '_Tuple2', _0: state, _1: subs};
		if (_p6._0.ctor === 'Nothing') {
			if (_p6._1.ctor === '[]') {
				return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$core$Process$spawn(
						_user$project$Benchmark$watch(
							_elm_lang$core$Platform$sendToSelf(router))),
					function (watcher) {
						return _elm_lang$core$Task$succeed(
							_elm_lang$core$Maybe$Just(
								{subs: subs, watcher: watcher}));
					});
			}
		} else {
			if (_p6._1.ctor === '[]') {
				return A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$core$Process$kill(_p6._0._0.watcher),
					function (_p7) {
						return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
					});
			} else {
				return _elm_lang$core$Task$succeed(
					_elm_lang$core$Maybe$Just(
						{subs: subs, watcher: _p6._0._0.watcher}));
			}
		}
	});
var _user$project$Benchmark$runTask = _user$project$Native_Benchmark.runTask;
var _user$project$Benchmark$run = _user$project$Native_Benchmark.run;
var _user$project$Benchmark$suiteWithOptions = _user$project$Native_Benchmark.suite;
var _user$project$Benchmark$bench = _user$project$Native_Benchmark.bench;
var _user$project$Benchmark$defaultOptions = {maxTime: 5};
var _user$project$Benchmark$suite = _user$project$Benchmark$suiteWithOptions(_user$project$Benchmark$defaultOptions);
var _user$project$Benchmark$subscription = _elm_lang$core$Native_Platform.leaf('Benchmark');
var _user$project$Benchmark$Stats = F5(
	function (a, b, c, d, e) {
		return {timeStamp: a, name: b, period: c, rme: d, samples: e};
	});
var _user$project$Benchmark$Options = function (a) {
	return {maxTime: a};
};
var _user$project$Benchmark$Bench = {ctor: 'Bench'};
var _user$project$Benchmark$Suite = {ctor: 'Suite'};
var _user$project$Benchmark$Failed = {ctor: 'Failed'};
var _user$project$Benchmark$BenchError = function (a) {
	return {ctor: 'BenchError', _0: a};
};
var _user$project$Benchmark$Finished = {ctor: 'Finished'};
var _user$project$Benchmark$Complete = function (a) {
	return {ctor: 'Complete', _0: a};
};
var _user$project$Benchmark$Cycle = function (a) {
	return {ctor: 'Cycle', _0: a};
};
var _user$project$Benchmark$Start = function (a) {
	return {ctor: 'Start', _0: a};
};
var _user$project$Benchmark$Tagger = function (a) {
	return {ctor: 'Tagger', _0: a};
};
var _user$project$Benchmark$events = function (tagger) {
	return _user$project$Benchmark$subscription(
		_user$project$Benchmark$Tagger(tagger));
};
var _user$project$Benchmark$subMap = F2(
	function (func, _p8) {
		var _p9 = _p8;
		return _user$project$Benchmark$Tagger(
			function (_p10) {
				return func(
					_p9._0(_p10));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Benchmark'] = {pkg: 'user/project', init: _user$project$Benchmark$init, onEffects: _user$project$Benchmark$onEffects, onSelfMsg: _user$project$Benchmark$onSelfMsg, tag: 'sub', subMap: _user$project$Benchmark$subMap};
